{"name":"pyplot.jl","tagline":"Graphics solution for Julia based on matplotlib.pyplot","body":"## What\r\n\r\nGraphics solution for [Julia][] based on [matploblib][], mainly the pyplot\r\nmodule.\r\n\r\n\r\n## Why\r\n\r\nThe Julia community seems to be having a discussion over which approach\r\nshould be used as the default graphics solution [[1][graphics-wiki]]\r\n[[2][graphics-gg]], and it may take a longer time for a mature solution to\r\nemerge. I just cannot wait that long, so I started my own.\r\n\r\n[graphics-wiki]: https://github.com/JuliaLang/julia/wiki/Graphics\r\n[graphics-gg]: https://groups.google.com/forum/?fromgroups=#!searchin/julia-dev/plot$20interface/julia-dev/Mi44lkCusCw/u3B3KZx0BO0J\r\n\r\n## Example\r\n\r\n```julia\r\n# load module\r\nusing pyplot\r\n\r\n# generate data\r\nx = linspace(0, pi, 300)\r\ns = sin(x)\r\n\r\n# pop new figure window\r\nfigure()\r\n\r\n# plot\r\nplot(x, s, :label, L\"$sin(x)$\")\r\nlegend(\"upper left\")\r\ntitle(L\"$sin(x)$\")\r\nxlabel(L\"$x$\")\r\nylabel(L\"$y$\")\r\n\r\n# save the plot\r\nsavefig(\"demo.png\")\r\n```\r\n\r\n![screenshot](https://github.com/autozimu/pyplot.jl/raw/master/demo/demo.png)\r\n\r\n\r\n## Features\r\n\r\n\r\n* perfect 2D plot\r\n* interactive usage\r\n* excellent math symbol support\r\n* multiple backends (PNG, PDF, JPEG, ...)\r\n\r\nSince this module is simply a wrapper for matplotlib, all credit goes\r\nto matplotlib developers.\r\n\r\n## Prerequirements\r\n\r\n* [Julia](https://github.com/JuliaLang/julia): recent versions (>= 0.1) may be required.\r\n* [zmq](http://www.zeromq.org/): version 2.x only due to [ZMQ.jl](https://github.com/aviks/ZMQ.jl)\r\n* [ipython](http://ipython.org/) +\r\n[matplotlib](http://matplotlib.org/) +\r\n[pyzmq](https://github.com/zeromq/pyzmq)\r\n* patience :)\r\n\r\n## Setup\r\n\r\nIn julia session, install module dependencies by\r\n\r\n```julia\r\nrequire(\"Pkg\")\r\nPkg.add(\"ZMQ\")\r\n```\r\n\r\nInstall this module by\r\n\r\n```bash\r\ngit clone https://github.com/autozimu/pyplot.jl ~/.julia/pyplot\r\n```\r\n\r\nNow in julia session,\r\n\r\n```julia\r\nrequire(\"pyplot\")\r\npyplot.figure()\r\n```\r\n\r\nIf matplotlib window open up, it should be a successful installation.\r\n\r\n## Usage\r\n\r\nMostly, the function signature is the same as calling pyplot in python /\r\nipython, except some semantic differences due to the implementation:\r\n\r\n* [kwargs][]: use `:color, \"red\"` for `color=\"red\"`\r\n* escaping characters: use `\\\\` for `\\` to escape characters.\r\n  Alternatively, prefix string with `E`, `I`, or `L` accordingly to\r\n  prevent Julia perform escaping and/or interpolation.\r\n  [[1][Julia_non_standard_string]]\r\n\r\n[Demos][demo] should be enough for elementary and medium usage.\r\n\r\n[kwargs]: http://rosettacode.org/wiki/Named_parameters\r\n[demo]: https://github.com/autozimu/pyplot.jl/tree/master/demo\r\n[Julia_non_standard_string]: http://docs.julialang.org/en/latest/manual/strings/#non-standard-string-literals\r\n\r\n## Limitation\r\n\r\n* UTF-8 string is not supported.\r\n\r\n## Support and Contact\r\n\r\nIf any questions or comments, feel free to contact <autozimu@gmail.com>.\r\n\r\n[Julia]: http://julialang.org/ \"The Julia Language\"\r\n[matploblib]: http://matplotlib.org/ \"matplotlib\"\r\n","google":"UA-26765101-4","note":"Don't delete this file! It's used internally to help with page regeneration."}